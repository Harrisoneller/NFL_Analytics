library(nflplotR)
library(ggplot2)
library(extrafont)
library(ggrepel)
library(ggimage)
library(ggridges)
library(ggtext)
library(ggfx)
library(geomtextpath)
library(cropcircles)
library(magick)
library(glue)
library(gt)
library(gtExtras)
library(nflverse)
library(xgboost)
library(xtable)
library(rvest)
library(dplyr)
library(tidyr)
library(stringr)
library(htmltools)
library(htmlwidgets)
library(reactable)
library(stringdist)
library(nflfastR)
library(nflreadr)
library(nflverse)
library(stringr)
library(tidyverse)
library(nnet)
library(mgcv)
library(texreg)
library(aod)
library(xtable)
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
library(tidyverse)
library(gt)
library(gsisdecoder)
setwd("/Users/HarrisonEller/Documents/Statletics/Repositories/NFL_Analytics")
source('nfl_ypp_model.r')
week=10
### ypp model ###
if (TRUE){
ypp_proj<-YPP(season=2024,week=week)
rows <- nrow(ypp_proj)
odd_rows <- seq_len(rows) %% 2
# getting data from odd data frame
data_mod <- ypp_proj[odd_rows == 1, ]
ypp_inp=TRUE
}else(ypp_inp=FALSE)
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
colnames(proj)[1]<-"home";colnames(proj)[2]<-"home_score";colnames(proj)[3]<-"away"
colnames(proj)[4]<-"away_score"
proj$home_score = as.numeric(proj$home_score);proj$away_score = as.numeric(proj$away_score)
proj['home_ypp']=0
proj['away_ypp']=0
for (game in 1:nrow(proj)){
sched <- schedule %>%
filter(home_team==proj$home[game] & away_team==proj$away[game])
proj$home_score[game]<-(proj$home_score[game] + sched$home_total)/2
proj$away_score[game]<-(proj$away_score[game] + sched$away_total)/2
if (ypp_inp != FALSE){
proj$home_ypp[game]<- data_mod$home_off_ypp[which(data_mod$home == proj$home[game])]
proj$away_ypp[game]<- data_mod$away_off_ypp[which(data_mod$away == proj$away[game])]
}
}
proj
################ EPA scrape ###############
info <- nflfastR::teams_colors_logos
nfc <- info %>%
filter(team_conf == "NFC")
afc <- info %>%
filter(team_conf == "AFC")
### creating function to add SD, mean, and mean + sd
meansd <- function(x, ...) {
mean <- mean(x)
sd <- sd(x)
c(mean - sd, mean, mean + sd)
}
pbp <- load_pbp(c(2024))
pbp<- clean_pbp(pbp)
pbp <- add_qb_epa(pbp)
factor(pbp$posteam)
team_info<-teams_colors_logos
df_off <- pbp %>%
filter(season_type == "REG", down %in% c(1, 2, 3, 4), punt_attempt == 0) %>%
group_by(posteam, game_id )%>%
summarise(
OFF_EPA = mean(epa, na.rm = TRUE),
QB_EPA = mean(qb_epa,na.rm = TRUE),
QB = max(passer_player_name,na.rm = TRUE),
fumble = sum(fumble_lost),
interception = sum(interception),
pass_ypa = sum(passing_yards,na.rm = TRUE)/sum(pass_attempt,na.rm = TRUE),
rush_ypa = sum(rushing_yards,na.rm = TRUE)/sum(rush_attempt,na.rm = TRUE),
pass_yds = sum(passing_yards,na.rm = TRUE),
rush_yds = sum(rushing_yards,na.rm = TRUE),
ypp = sum(sum(rushing_yards,na.rm = TRUE) + sum(passing_yards,na.rm = TRUE))/n(),
drives = max(drive,na.rm = TRUE)/2,
#    home_points = max(home_score,na.rm = TRUE),
#    away_points = max(away_score,na.rm = TRUE),
home_team = max(home_team,na.rm = TRUE),
pressures_allowed = (sum(sack,na.rm = TRUE)+sum(qb_hit,na.rm = TRUE) ),
total_plays_off = n(),
points = if_else(max(posteam,na.rm = TRUE) == max(home_team,na.rm = TRUE), max(home_score,na.rm = TRUE),max(away_score,na.rm = TRUE))
)
df_def<- pbp %>%
filter(season_type == "REG", down %in% c(1, 2, 3, 4), punt_attempt == 0) %>%
group_by(defteam, game_id )%>%
summarise(
OFF_EPA_allowed = mean(epa, na.rm = TRUE),
QB_EPA_allowed = mean(qb_epa,na.rm = TRUE),
#QB = max(passer_player_name,na.rm = TRUE),
fumbles_forced = sum(fumble_lost),
interceptions_forced = sum(interception),
pass_ypa_allowed = sum(passing_yards,na.rm = TRUE)/sum(pass_attempt,na.rm = TRUE),
rush_ypa_allowed = sum(rushing_yards,na.rm = TRUE)/sum(rush_attempt,na.rm = TRUE),
pass_yds_allowed = sum(passing_yards,na.rm = TRUE),
rush_yds_allowed = sum(rushing_yards,na.rm = TRUE),
ypp_allowed = sum(sum(rushing_yards,na.rm = TRUE) + sum(passing_yards,na.rm = TRUE))/n(),
drives_allowed = max(drive,na.rm = TRUE)/2,
#    home_points = max(home_score,na.rm = TRUE),
#    away_points = max(away_score,na.rm = TRUE),
away_team = max(away_team,na.rm = TRUE),
pressures_forced = (sum(sack,na.rm = TRUE)+sum(qb_hit,na.rm = TRUE) ),
total_plays_def = n(),
points_allowed = if_else(max(defteam,na.rm = TRUE) == max(home_team,na.rm = TRUE), max(away_score,na.rm = TRUE),max(home_score,na.rm = TRUE))
)
df<-cbind(df_off,df_def)
off <- df %>%
group_by(posteam) %>%
summarise(
EPA = mean(OFF_EPA),
ypp = median(ypp)
)
def <- df %>%
group_by(defteam) %>%
summarise(
EPA_allowed = mean(OFF_EPA_allowed),
ypp_allowed = median(ypp_allowed)
)
agg <- off %>%
inner_join(def, c('posteam'='defteam'))
agg$EPA <-rank(-agg$EPA)
agg$EPA_allowed <-rank(agg$EPA_allowed)
schedule['Home_EPA']<-0
schedule['Away_EPA']<-0
schedule['Home_EPA_Allowed']<-0
schedule['Away_EPA_Allowed']<-0
schedule['Home']<-""
schedule['Away']<-""
schedule['Home_Proj']<-0
schedule['Away_Proj']<-0
schedule['Home_Record']<-""
schedule['Away_Record']<-""
schedule['Home_YPP']<-0
schedule['Away_YPP']<-0
for (j in 1:nrow(schedule)){
schedule$Home_EPA[j]<-round(pull(agg[which(agg$posteam == schedule$home_team[j]),'EPA']),2)
schedule$Away_EPA[j]<-round(pull(agg[which(agg$posteam == schedule$away_team[j]),'EPA']),2)
schedule$Home_EPA_Allowed[j]<-round(pull(agg[which(agg$posteam == schedule$home_team[j]),'EPA_allowed']),2)
schedule$Away_EPA_Allowed[j]<-round(pull(agg[which(agg$posteam == schedule$away_team[j]),'EPA_allowed']),2)
schedule$Home[j]<-team_info$team_nick[which(team_info$team_abbr == schedule$home_team[j])]
schedule$Away[j]<-team_info$team_nick[which(team_info$team_abbr == schedule$away_team[j])]
schedule$Home_Proj[j]<- round(proj$home_score[which(proj$home == schedule$home_team[j])],2)
schedule$Away_Proj[j]<-round(proj$away_score[which(proj$away == schedule$away_team[j])],2)
schedule$Home_YPP[j]<- round(proj$home_ypp[which(proj$home == schedule$home_team[j])],2)
schedule$Away_YPP[j]<-round(proj$away_ypp[which(proj$away == schedule$away_team[j])],2)
}
schedule
proj
round(proj$home_score[which(proj$home == schedule$home_team[j])],2)
schedule$home_team[j]
which(proj$home == schedule$home_team[j])
proj$home
proj$away
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
proj
schedule
week
schedule
tibble(projections)
reticulate::repl_python()
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
colnames(proj)[1]<-"home";colnames(proj)[2]<-"home_score";colnames(proj)[3]<-"away"
colnames(proj)[4]<-"away_score"
proj$home_score = as.numeric(proj$home_score);proj$away_score = as.numeric(proj$away_score)
proj['home_ypp']=0
proj['away_ypp']=0
for (game in 1:nrow(proj)){
sched <- schedule %>%
filter(home_team==proj$home[game] & away_team==proj$away[game])
proj$home_score[game]<-(proj$home_score[game] + sched$home_total)/2
proj$away_score[game]<-(proj$away_score[game] + sched$away_total)/2
if (ypp_inp != FALSE){
proj$home_ypp[game]<- data_mod$home_off_ypp[which(data_mod$home == proj$home[game])]
proj$away_ypp[game]<- data_mod$away_off_ypp[which(data_mod$away == proj$away[game])]
}
}
################ EPA scrape ###############
info <- nflfastR::teams_colors_logos
nfc <- info %>%
filter(team_conf == "NFC")
afc <- info %>%
filter(team_conf == "AFC")
### creating function to add SD, mean, and mean + sd
meansd <- function(x, ...) {
mean <- mean(x)
sd <- sd(x)
c(mean - sd, mean, mean + sd)
}
pbp <- load_pbp(c(2024))
pbp<- clean_pbp(pbp)
pbp <- add_qb_epa(pbp)
factor(pbp$posteam)
team_info<-teams_colors_logos
df_off <- pbp %>%
filter(season_type == "REG", down %in% c(1, 2, 3, 4), punt_attempt == 0) %>%
group_by(posteam, game_id )%>%
summarise(
OFF_EPA = mean(epa, na.rm = TRUE),
QB_EPA = mean(qb_epa,na.rm = TRUE),
QB = max(passer_player_name,na.rm = TRUE),
fumble = sum(fumble_lost),
interception = sum(interception),
pass_ypa = sum(passing_yards,na.rm = TRUE)/sum(pass_attempt,na.rm = TRUE),
rush_ypa = sum(rushing_yards,na.rm = TRUE)/sum(rush_attempt,na.rm = TRUE),
pass_yds = sum(passing_yards,na.rm = TRUE),
rush_yds = sum(rushing_yards,na.rm = TRUE),
ypp = sum(sum(rushing_yards,na.rm = TRUE) + sum(passing_yards,na.rm = TRUE))/n(),
drives = max(drive,na.rm = TRUE)/2,
#    home_points = max(home_score,na.rm = TRUE),
#    away_points = max(away_score,na.rm = TRUE),
home_team = max(home_team,na.rm = TRUE),
pressures_allowed = (sum(sack,na.rm = TRUE)+sum(qb_hit,na.rm = TRUE) ),
total_plays_off = n(),
points = if_else(max(posteam,na.rm = TRUE) == max(home_team,na.rm = TRUE), max(home_score,na.rm = TRUE),max(away_score,na.rm = TRUE))
)
df_def<- pbp %>%
filter(season_type == "REG", down %in% c(1, 2, 3, 4), punt_attempt == 0) %>%
group_by(defteam, game_id )%>%
summarise(
OFF_EPA_allowed = mean(epa, na.rm = TRUE),
QB_EPA_allowed = mean(qb_epa,na.rm = TRUE),
#QB = max(passer_player_name,na.rm = TRUE),
fumbles_forced = sum(fumble_lost),
interceptions_forced = sum(interception),
pass_ypa_allowed = sum(passing_yards,na.rm = TRUE)/sum(pass_attempt,na.rm = TRUE),
rush_ypa_allowed = sum(rushing_yards,na.rm = TRUE)/sum(rush_attempt,na.rm = TRUE),
pass_yds_allowed = sum(passing_yards,na.rm = TRUE),
rush_yds_allowed = sum(rushing_yards,na.rm = TRUE),
ypp_allowed = sum(sum(rushing_yards,na.rm = TRUE) + sum(passing_yards,na.rm = TRUE))/n(),
drives_allowed = max(drive,na.rm = TRUE)/2,
#    home_points = max(home_score,na.rm = TRUE),
#    away_points = max(away_score,na.rm = TRUE),
away_team = max(away_team,na.rm = TRUE),
pressures_forced = (sum(sack,na.rm = TRUE)+sum(qb_hit,na.rm = TRUE) ),
total_plays_def = n(),
points_allowed = if_else(max(defteam,na.rm = TRUE) == max(home_team,na.rm = TRUE), max(away_score,na.rm = TRUE),max(home_score,na.rm = TRUE))
)
df<-cbind(df_off,df_def)
off <- df %>%
group_by(posteam) %>%
summarise(
EPA = mean(OFF_EPA),
ypp = median(ypp)
)
def <- df %>%
group_by(defteam) %>%
summarise(
EPA_allowed = mean(OFF_EPA_allowed),
ypp_allowed = median(ypp_allowed)
)
agg <- off %>%
inner_join(def, c('posteam'='defteam'))
agg$EPA <-rank(-agg$EPA)
agg$EPA_allowed <-rank(agg$EPA_allowed)
schedule['Home_EPA']<-0
schedule['Away_EPA']<-0
schedule['Home_EPA_Allowed']<-0
schedule['Away_EPA_Allowed']<-0
schedule['Home']<-""
schedule['Away']<-""
schedule['Home_Proj']<-0
schedule['Away_Proj']<-0
schedule['Home_Record']<-""
schedule['Away_Record']<-""
schedule['Home_YPP']<-0
schedule['Away_YPP']<-0
for (j in 1:nrow(schedule)){
schedule$Home_EPA[j]<-round(pull(agg[which(agg$posteam == schedule$home_team[j]),'EPA']),2)
schedule$Away_EPA[j]<-round(pull(agg[which(agg$posteam == schedule$away_team[j]),'EPA']),2)
schedule$Home_EPA_Allowed[j]<-round(pull(agg[which(agg$posteam == schedule$home_team[j]),'EPA_allowed']),2)
schedule$Away_EPA_Allowed[j]<-round(pull(agg[which(agg$posteam == schedule$away_team[j]),'EPA_allowed']),2)
schedule$Home[j]<-team_info$team_nick[which(team_info$team_abbr == schedule$home_team[j])]
schedule$Away[j]<-team_info$team_nick[which(team_info$team_abbr == schedule$away_team[j])]
schedule$Home_Proj[j]<- round(proj$home_score[which(proj$home == schedule$home_team[j])],2)
schedule$Away_Proj[j]<-round(proj$away_score[which(proj$away == schedule$away_team[j])],2)
schedule$Home_YPP[j]<- round(proj$home_ypp[which(proj$home == schedule$home_team[j])],2)
schedule$Away_YPP[j]<-round(proj$away_ypp[which(proj$away == schedule$away_team[j])],2)
}
url <- "https://www.pro-football-reference.com/years/2024/"
team_info<-teams_colors_logos
### Get AFC conference table from pro-football-reference site
AFC_table <- url %>%
xml2::read_html() %>%
html_nodes(xpath = '//*[@id="AFC"]') %>%
html_table()
AFC_table <- AFC_table[[1]]
### Get NFC conference table from pro-football-reference site
NFC_table <- url %>%
xml2::read_html() %>%
html_nodes(xpath = '//*[@id="NFC"]') %>%
html_table()
NFC_table <- NFC_table[[1]]
### Combine AFC and NFC tables together
NFL_table <- rbind(AFC_table, NFC_table)
NFL_table_clean <- NFL_table %>%
### Create NFL divisions column
mutate(Division = ifelse(str_detect(Tm, "FC"), Tm, NA)) %>%
fill(Division, .direction = "down") %>%
### Remove team division names from Tm column
filter(str_detect(Tm, "FC", negate = TRUE)) %>%
### Add column to say if team made playoffs based off of pre-existing asterisks
mutate(Projection = ifelse(str_detect(Tm, "[*+]"), "Yes", "No")) %>%
### Remove asterisks and plus signs next to team names
mutate(Tm = gsub("[*+]", "", Tm)) %>%
rename(Record = `W-L%`) %>%
### Convert W, L, T into one column named "Record"
#unite(Record, W, L, T, sep = "-") %>%
unite(Record, W, L,  sep = "-") %>%
### Extract team name
mutate(Team = word(Tm, -1)) %>%
mutate(
Team = case_when(
Team == "Redskins" ~ "Washington",
TRUE ~ Team
)
) %>%
### Convert columns containing numbers from character to numeric
mutate_at(c("SRS", "OSRS", "DSRS", "PF", "PA", "MoV", "SoS"),
as.numeric) %>%
### Rank SoS column from 1 to 4 with 1 containing the lowest values and 4 containing the highest
mutate(SoS_rating = ntile(SoS, 4)) %>%
select(
Division,
Team,
Record,
Projection,
SoS_rating,
PF,
PA,
MoV,
OSRS,
DSRS,
SRS,
)
#model_pred$Home_Team[amatch(NFL_table_clean$Team[row] ,word( model_pred$Home_Team,-1), maxDist = 2)]
NFL_table_clean['team_abbr']<-""
for (j in 1:nrow(NFL_table_clean)){
NFL_table_clean$team_abbr[j]<- team_info$team_abbr[which(team_info$team_nick == NFL_table_clean$Team[j] )]
}
# home<- NFL_table_clean %>%
#   filter(NFL_table_clean$Team %in% pull(team_info[which(team_info$team_abbr %in% schedule$home_team  ),'team_nick'] ) )
# names(home)[2]<-'Home_Team'
#
# away<- NFL_table_clean %>%
#   filter(NFL_table_clean$Team %in% pull(team_info[which(team_info$team_abbr %in% schedule$away_team ),'team_nick'] ) )
# names(away)[2]<-'Away_Team'
#
# t<-cbind(home,away)
for(j in 1:nrow(schedule)){
home_nick<-team_info$team_nick[which(team_info$team_abbr == schedule$home_team[j])]
away_nick<-team_info$team_nick[which(team_info$team_abbr == schedule$away_team[j])]
schedule$Home_Record[j]<-NFL_table_clean$Record[which(NFL_table_clean$Team == home_nick)]
schedule$Away_Record[j]<-NFL_table_clean$Record[which(NFL_table_clean$Team == away_nick)]
}
NFL_table_clean <- schedule %>%
select(
Home_EPA,
Home_EPA_Allowed,
Home,
Home_YPP,
Home_Proj,
Away_Proj,
Away_YPP,
Away,
Away_EPA_Allowed,
Away_EPA,
Home_Record,
Away_Record
)
NFL_table_clean<-NFL_table_clean %>% filter(!is.na(Home_Proj))
# show_data<-NFL_table_clean %>%
#    filter(Home == "Cowboys")
NFL_table_clean
## -------------------- use for creating show previews -------------------- ##
show_data<-NFL_table_clean %>%
filter(Home == "Ravens")
show_data
NFL_table_clean
View(NFL_table_clean)
View(show_data)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(nflfastR)
library(tidyverse)
library(nflplotR)
library(ggplot2)
library(extrafont)
library(ggrepel)
library(ggimage)
library(ggridges)
library(ggtext)
library(ggfx)
library(geomtextpath)
library(cropcircles)
library(magick)
library(glue)
library(gt)
library(gtExtras)
library(nflverse)
library(xgboost)
library(xtable)
library(rvest)
library(dplyr)
library(tidyr)
library(stringr)
library(htmltools)
library(htmlwidgets)
library(reactable)
library(stringdist)
library(nflfastR)
library(nflreadr)
library(nflverse)
library(stringr)
library(tidyverse)
library(nnet)
library(mgcv)
library(texreg)
library(aod)
library(xtable)
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
library(tidyverse)
library(gt)
library(gsisdecoder)
setwd("/Users/HarrisonEller/Documents/Statletics/Repositories/NFL_Analytics")
source('nfl_ypp_model.r')
week=11
### ypp model ###
if (TRUE){
ypp_proj<-YPP(season=2024,week=week)
rows <- nrow(ypp_proj)
odd_rows <- seq_len(rows) %% 2
# getting data from odd data frame
data_mod <- ypp_proj[odd_rows == 1, ]
ypp_inp=TRUE
}else(ypp_inp=FALSE)
reticulate::repl_python()
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
colnames(proj)[1]<-"home";colnames(proj)[2]<-"home_score";colnames(proj)[3]<-"away"
colnames(proj)[4]<-"away_score"
proj$home_score = as.numeric(proj$home_score);proj$away_score = as.numeric(proj$away_score)
proj['home_ypp']=0
proj['away_ypp']=0
for (game in 1:nrow(proj)){
sched <- schedule %>%
filter(home_team==proj$home[game] & away_team==proj$away[game])
proj$home_score[game]<-(proj$home_score[game] + sched$home_total)/2
proj$away_score[game]<-(proj$away_score[game] + sched$away_total)/2
if (ypp_inp != FALSE){
proj$home_ypp[game]<- data_mod$home_off_ypp[which(data_mod$home == proj$home[game])]
proj$away_ypp[game]<- data_mod$away_off_ypp[which(data_mod$away == proj$away[game])]
}
}
proj
reticulate::repl_python()
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
proj
week=11
xgb=TRUE
reticulate::repl_python()
