reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(nflfastR)
library(tidyverse)
library(nflplotR)
library(ggplot2)
library(extrafont)
library(ggrepel)
library(ggimage)
library(ggridges)
library(ggtext)
library(ggfx)
library(geomtextpath)
library(cropcircles)
library(magick)
library(glue)
library(gt)
library(gtExtras)
library(nflverse)
library(xgboost)
library(xtable)
library(rvest)
library(dplyr)
library(tidyr)
library(stringr)
library(htmltools)
library(htmlwidgets)
library(reactable)
library(stringdist)
library(nflfastR)
library(nflreadr)
library(nflverse)
library(stringr)
library(tidyverse)
library(nnet)
library(mgcv)
library(texreg)
library(aod)
library(xtable)
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
library(tidyverse)
library(gt)
library(gsisdecoder)
setwd("/Users/HarrisonEller/Documents/Statletics/Repositories/NFL_Analytics")
source('nfl_ypp_model.r')
week=7
reticulate::repl_python()
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
proj$home_score = as.numeric(proj$home_score);proj$away_score = as.numeric(proj$away_score)
proj
proj['home_ypp']=0
proj['away_ypp']=0
for (game in 1:nrow(proj)){
sched <- schedule %>%
filter(home_team==proj$home[game] & away_team==proj$away[game])
proj$home_score[game]<-(proj$home_score[game] + sched$home_total)/2
proj$away_score[game]<-(proj$away_score[game] + sched$away_total)/2
proj$home_ypp[game]<- data_mod$home_off_ypp[which(data_mod$home == proj$home[game])]
proj$away_ypp[game]<- data_mod$away_off_ypp[which(data_mod$away == proj$away[game])]
}
for (game in 1:nrow(proj)){
sched <- schedule %>%
filter(home_team==proj$home[game] & away_team==proj$away[game])
proj$home_score[game]<-(proj$home_score[game] + sched$home_total)/2
proj$away_score[game]<-(proj$away_score[game] + sched$away_total)/2
}
proj
reticulate::repl_python()
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
proj
proj$home_score = as.numeric(proj$home_score);proj$away_score = as.numeric(proj$away_score)
proj
reticulate::repl_python()
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
proj
colnames(proj)
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
colnames(proj)[1]<-"home_team";colnames(proj)[2]<-"home_score";colnames(proj)[3]<-"away_team"
colnames(proj)[4]<-"away_score"
proj$home_score = as.numeric(proj$home_score);proj$away_score = as.numeric(proj$away_score)
proj
proj['home_ypp']=0
proj['away_ypp']=0
for (game in 1:nrow(proj)){
sched <- schedule %>%
filter(home_team==proj$home[game] & away_team==proj$away[game])
proj$home_score[game]<-(proj$home_score[game] + sched$home_total)/2
proj$away_score[game]<-(proj$away_score[game] + sched$away_total)/2
proj$home_ypp[game]<- data_mod$home_off_ypp[which(data_mod$home == proj$home[game])]
proj$away_ypp[game]<- data_mod$away_off_ypp[which(data_mod$away == proj$away[game])]
}
schedule<-load_schedules(2024)
schedule <- schedule[which(schedule$week == week),]
schedule['away_total']<-schedule$total_line/2 - schedule$spread_line/2
schedule['home_total']<-schedule$total_line/2 + schedule$spread_line/2
proj<- tibble(projections)
colnames(proj)[1]<-"home";colnames(proj)[2]<-"home_score";colnames(proj)[3]<-"away"
colnames(proj)[4]<-"away_score"
proj$home_score = as.numeric(proj$home_score);proj$away_score = as.numeric(proj$away_score)
proj['home_ypp']=0
proj['away_ypp']=0
for (game in 1:nrow(proj)){
sched <- schedule %>%
filter(home_team==proj$home[game] & away_team==proj$away[game])
proj$home_score[game]<-(proj$home_score[game] + sched$home_total)/2
proj$away_score[game]<-(proj$away_score[game] + sched$away_total)/2
proj$home_ypp[game]<- data_mod$home_off_ypp[which(data_mod$home == proj$home[game])]
proj$away_ypp[game]<- data_mod$away_off_ypp[which(data_mod$away == proj$away[game])]
}
reticulate::repl_python()
