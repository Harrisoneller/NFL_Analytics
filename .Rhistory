#home<-tibble(home)
#
# for (col in cols){
#   home[col]<-as.numeric(unlist(home[col]))
# }
#
# for (col in cols){
#   for (i in nrow(home)){
#     if(is.na(home[i,col])){home[i,col] <- sum(home[col],na.rm=TRUE)/nrow(na.omit(home[col]))}
#   }
# }
X = home[cols]
Y = home['points']
# new_data_home<-new_data_home[cols]
#
#
# model_home = lm(points ~ elo+opp_elo+off_overall+
#                   sacks_allowed + sacks +net_passing_yards + rushing_yards +
#                   home_dummy + turnovers + off_success_rate
#                  ,data = home ,weights = home$weights)
# summary(model_home)
# model_home$coefficients
# predict(model_home,new_data_home)
for(i in 1:ncol(X)){
X[,i] = as.numeric(X[,i])
}
hp<-c()
for(k in 1:5){
r = seq(1,nrow(X), 1)
s = sample(r, 3 ,replace = F)
train_x = data.matrix(X[-s,])
train_y = data.matrix(Y[-s,])
test_x = data.matrix(X[s,])
test_y = data.matrix(Y[s,])
train_weights = data.matrix(home$weights[-s])
test_weights = data.matrix(home$weights[s])
# set up the cross-validated hyper-parameter search
xgb_grid_1 = expand.grid(
nrounds = 1000,
eta = c(0.01, 0.001, 0.0001),
max_depth = c(2, 4, 6, 8, 10),
gamma = 1
)
# pack the training control parameters
xgb_trcontrol_1 = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE,
returnData = FALSE,
returnResamp = "all",                                                        # save losses across all models
classProbs = FALSE,                                                           # set to TRUE for AUC to be computed
summaryFunction = defaultSummary,
allowParallel = TRUE
)
#define predictor and response variables in testing se
#define final training and testing sets
xgb_train = xgb.DMatrix(data = train_x, label = train_y, weight=train_weights)
xgb_test = xgb.DMatrix(data = test_x, label = test_y,weight = test_weights)
watchlist = list(train=xgb_train, test=xgb_test)
params <- list(booster = "gblinear",
objective = "reg:absoluteerror")
xgb_base <- 0
xgb_base <- xgb.train(params = params,
data = xgb_train,
nrounds =100,
print_every_n = 100,
max_depth = 3,
eval_metric = "rmse",
early_stopping_rounds = 20,
trControl = xgb_trcontrol_1,
tuneGrid = xgb_grid_1,
watchlist = watchlist)
#model = xgb.train(data = xgb_train, max.depth = 3, nrounds = 70)
#final = xgboost(data = xgb_train, max.depth = 3, nrounds = 60)
new_data_home = data.matrix(new_data_home)
# predict home points #
hp[k] = predict(xgb_base,new_data_home)
}
home_points<-mean(hp)
########## away #############
X = away[cols]
Y = away['points']
for(i in 1:ncol(X)){
X[,i] = as.numeric(X[,i])
}
ap<-c()
for(k in 1:5){
r = seq(1,nrow(X), 1)
s = sample(r, 3 ,replace = F)
train_x = data.matrix(X[-s,])
train_y = data.matrix(Y[-s,])
test_x = data.matrix(X[s,])
test_y = data.matrix(Y[s,])
train_weights = data.matrix(away$weights[-s])
test_weights = data.matrix(away$weights[s])
# set up the cross-validated hyper-parameter search
xgb_grid_1 = expand.grid(
nrounds = 1000,
eta = c(0.01, 0.001, 0.0001),
max_depth = c(2, 4, 6, 8, 10),
gamma = 1
)
# pack the training control parameters
xgb_trcontrol_1 = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE,
returnData = FALSE,
returnResamp = "all",                                                        # save losses across all models
classProbs = FALSE,                                                           # set to TRUE for AUC to be computed
summaryFunction = defaultSummary,
allowParallel = TRUE
)
#define predictor and response variables in testing se
#define final training and testing sets
xgb_train = xgb.DMatrix(data = train_x, label = train_y,weight = train_weights)
xgb_test = xgb.DMatrix(data = test_x, label = test_y,weight = test_weights)
watchlist = list(train=xgb_train, test=xgb_test)
params <- list(booster = "gblinear",
objective = "reg:absoluteerror")
xgb_base <- 0
xgb_base <- xgb.train(params = params,
data = xgb_train,
nrounds =100,
print_every_n = 100,
max_depth = 4,
eval_metric = "rmse",
early_stopping_rounds = 20,
trControl = xgb_trcontrol_1,
tuneGrid = xgb_grid_1,
watchlist = watchlist)
# predict away points #
new_data_away = data.matrix(new_data_away)
ap[k] = predict(xgb_base,new_data_away)
}
away_points<-mean(ap)
# store #
y$ht[j] =  ht[j]
y$at[j] = at[j]
y$ht_score[j] = home_points
y$at_score[j] = away_points
y$ht_spread[j] = ifelse(is.null(cfbd_betting_lines(year = 2023, week = week, team = ht[j])$spread), 0, cfbd_betting_lines(year = 2023, week = week, team = ht[j])$spread)
#y$ht_spread[j] = -11
print(ht[j]);print(home_points);print(at[j]);print(away_points)
#setTxtProgressBar(pb2, j)
}
######## Find Value ######
y$diff = (y$at_score - y$ht_score)
# y$value = as.numeric(y$ht_spread) - y$ht_diff
#y$value_rating = (y$value)/100
y$value_side = 0
y$value_diff = 0
y$x_axis = 0
for (i in 1: nrow(y)){
if(y$diff[i] > 0 && as.numeric(y$ht_spread[i]) < 0){ y$value_side[i] = y$at[i]}
if(y$diff[i] > 0 && as.numeric(y$ht_spread[i]) >= 0 && as.numeric(y$ht_spread[i]) > y$diff[i] ){ y$value_side[i] = y$ht[i]}
if(y$diff[i] < 0 && as.numeric(y$ht_spread[i]) < y$diff[i]){ y$value_side[i] = y$at[i]}
if(y$diff[i] > 0 && as.numeric(y$ht_spread[i]) < y$diff[i]){ y$value_side[i] = y$at[i]}
if(y$diff[i] < 0 && as.numeric(y$ht_spread[i]) > y$diff[i]){ y$value_side[i] = y$ht[i]}
if(y$diff[i] > 0 && as.numeric(y$ht_spread[i]) < 0){ y$value_diff[i] = y$diff[i] - as.numeric(y$ht_spread[i])}
if(y$diff[i] > 0 && as.numeric(y$ht_spread[i]) > 0 && y$diff[i] < as.numeric(y$ht_spread[i])){ y$value_diff[i] = as.numeric(y$ht_spread[i]) - y$diff[i]}
if(y$diff[i] < 0 && as.numeric(y$ht_spread[i]) < y$diff[i]){ y$value_diff[i] = abs(as.numeric(y$ht_spread[i])) - abs(as.numeric(y$diff[i]))}
if(y$diff[i] > 0 && as.numeric(y$ht_spread[i]) < y$diff[i]){ y$value_diff[i] = y$diff[i] - as.numeric(y$ht_spread[i]) }
if(y$diff[i] < 0 && as.numeric(y$ht_spread[i]) > y$diff[i]){ y$value_diff[i] = abs(as.numeric(y$ht_spread[i])) + abs(as.numeric(y$diff[i]))}
}
for(i in 1:nrow(y)){
if(y$ht[i] == y$value_side[i]){y$x_axis[i] = y$at[i]}
if(y$at[i] == y$value_side[i]){y$x_axis[i] = y$ht[i] }
}
y$value_rating = abs((y$diff)/100)
y$value_rating = abs((y$value_diff)/100)
#df = rbind(df,y, fill = TRUE)
y
return(y)
}
df <- data.frame()
for (conf in c("SEC","ACC","B1G","B12",'PAC')){
y <- CFB_PROJECTIONS(ht=c(),at=c(),input_week=5,input_season=2023,include_vegas=1,conferences = c(conf),previous_season=0,remove_fcs = TRUE)
df<-rbind(df,y,fill=TRUE)
}
p5<-df
p5<-p5[-which(p5$ht == TRUE),]
p5 = p5[!duplicated(p5$ht),]
library(gt)
team_info <- cfbd_team_info()
team_info <- team_info %>%
filter(conference %in% c("SEC","Pac-12","Big Ten","Big 12","ACC"))
conf = "ACC"
temp <- subset(team_info,conference == conf)
team_plot_data <- p5 %>%
filter(ht %in% temp$school | at %in% temp$school)
team_plot_data$conference <- conf
#team_plot_data$at_score[9]<-17.78
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
team_plot_data$at_score[2]<-30.78
conf = "Big Ten"
temp <- subset(team_info,conference == conf)
team_plot_data <- p5 %>%
filter(ht %in% temp$school | at %in% temp$school)
team_plot_data$conference <- conf
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
team_plot_data$at_score[1]<-20.78
team_plot_data$at_score[2]<-24.78
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
team_plot_data$at_score[2]<-38.78
team_plot_data$ht_score[1]<-24.75
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
conf = "Big 12"
temp <- subset(team_info,conference == conf)
team_plot_data <- p5 %>%
filter(ht %in% temp$school | at %in% temp$school)
team_plot_data$conference <- conf
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
team_plot_data$at_score[3]<-22.10
team_plot_data$at_score[4]<-25.58
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
conf = "Pac-12"
temp <- subset(team_info,conference == conf)
team_plot_data <- p5 %>%
filter(ht %in% temp$school | at %in% temp$school)
team_plot_data$conference <- conf
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
team_plot_data$at_score[4]<-24.35
conf = "Pac-12"
temp <- subset(team_info,conference == conf)
team_plot_data <- p5 %>%
filter(ht %in% temp$school | at %in% temp$school)
team_plot_data$conference <- conf
team_plot_data$at_score[1]<-24.35
team_plot_data$ht_score[2]<-24.33
source("C:/Users/Harrison Eller/CFB_Analytics/cfb_model_update.R", echo=TRUE)
conf = "SEC"
temp <- subset(team_info,conference == conf)
team_plot_data <- p5 %>%
filter(ht %in% temp$school | at %in% temp$school)
team_plot_data$conference <- conf
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
team_plot_data$ht_score[1]<-24.52
team_plot_data$ht_score[2]<-16.79
team_plot_data$at_score[2]<-30.62
conf = "SEC"
temp <- subset(team_info,conference == conf)
team_plot_data <- p5 %>%
filter(ht %in% temp$school | at %in% temp$school)
team_plot_data$conference <- conf
team_plot_data$ht_score[1]<-24.52
team_plot_data$ht_score[3]<-16.79
team_plot_data$at_score[3]<-30.62
team_plot_data$ht_score[4]<-21.97
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
team_plot_data$at_score[7]<-32.41
team_plot_data %>%
transmute(Conference = conference, Home_Team = ht,
Home_Score = round(ht_score,2),
Away_Score = round(at_score,2), Away_Team = at, Spread_Pick = value_side) %>%
arrange(desc(Conference)) %>%
gt() %>%
gt_fmt_cfb_logo(columns = c("Conference", "Spread_Pick")) %>%
gt_fmt_cfb_wordmark(columns = c("Home_Team","Away_Team")) %>%
cols_align(
align = c('center'),
columns = everything()
) %>%
tab_header(
title = md("**Scarlett Score Predictions**"),
subtitle = md("Harrison Eller")
) %>%
fmt_number(
columns = c("Home_Score", "Away_Score")
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = c("Home_Score", "Away_Score")
)
)
